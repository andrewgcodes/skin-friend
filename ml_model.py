# -*- coding: utf-8 -*-
"""Skin Friends Part 2 lol

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1li0ixNv4VTYaytDIHwRsxQvlROdSVT8Z
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip -uq "/content/drive/My Drive/Skin Friends/54339-104884-bundle-archive.zip" -d "/content/drive/My Drive/Skin Friends"

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import json
import os
from glob import glob
from tqdm import tqdm, tqdm_notebook
import random
from PIL import Image


import tensorflow as tf
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import *
from tensorflow.keras.optimizers import *
from tensorflow.keras.applications import *
from tensorflow.keras.callbacks import *
from tensorflow.keras.initializers import *
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from numpy.random import seed

print(os.listdir('/content/drive/My Drive/Skin Friends/54339-104884-bundle-archive'))

path = '/content/drive/My Drive/Skin Friends/54339-104884-bundle-archive'
images_path = {os.path.splitext(os.path.basename(x))[0]: x for x in glob(os.path.join(path, '*', '*.jpg'))}

lesion_type_dict = {
    'nv': 'Melanocytic nevi',
    'mel': 'Melanoma',
    'bkl': 'Benign keratosis-like lesions ',
    'bcc': 'Basal cell carcinoma',
    'akiec': 'Actinic keratoses',
    'vasc': 'Vascular lesions',
    'df': 'Dermatofibroma'
}

skin_df = pd.read_csv(os.path.join(path,'HAM10000_metadata.csv'))

skin_df['path'] = skin_df['image_id'].map(images_path.get)
skin_df['cell_type'] = skin_df['dx'].map(lesion_type_dict.get)
skin_df['cell_type_idx'] = pd.Categorical(skin_df['cell_type']).codes

skin_df.info()

skin_df['image'] = skin_df['path'].map(lambda x: np.asarray(Image.open(x).resize((71,71))))

skin_df.head()

# Checking the image size distribution
skin_df['image'].map(lambda x: x.shape).value_counts()

X = skin_df['image']
y = skin_df['cell_type_idx']

X = X.values
X = X/255
X.shape

lst = []
for _ in X:
    lst.append(_)
X = np.array(lst)
print(X.shape)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X,y, test_size=0.20,random_state=28)
x_train, x_val, y_train, y_val = train_test_split(x_train,y_train, test_size=0.20,random_state=28)

from keras.utils.np_utils import to_categorical
y_train = to_categorical(y_train, num_classes = 7)
y_val = to_categorical(y_val , num_classes=7)

batch_size = 256
train_input_shape = (71, 71, 3)
n_classes = 7

from tensorflow.keras.layers import Input

"""Model"""

batch_size = 256
train_input_shape = (71, 71, 3)
n_classes = 7

# Transfer Learning with Xception

base_model = Xception(include_top = False , input_shape = train_input_shape)

for layer in base_model.layers:
    layer.trainable = True

# Add layers at the end

model = base_model.output
model = Flatten()(model)

model = Dense(512, kernel_initializer='he_uniform')(model)
model = Dropout(0.2)(model)
model = BatchNormalization()(model)
model = Activation('relu')(model)

model = Dense(128, kernel_initializer='he_uniform')(model)
model = Dropout(0.2)(model)
model = BatchNormalization()(model)
model = Activation('relu')(model)

model = Dense(52, kernel_initializer='he_uniform')(model)
model = Dropout(0.2)(model)
model = BatchNormalization()(model)
model = Activation('relu')(model)

model = Dense(16, kernel_initializer='he_uniform')(model)
model = Dropout(0.2)(model)
model = BatchNormalization()(model)
model = Activation('relu')(model)

output = Dense(n_classes, activation='softmax')(model)

model = Model(inputs=base_model.input, outputs=output)

optimizer = Adam(lr=0.001) # We can also try 0.0001
model.compile(loss='categorical_crossentropy',optimizer=optimizer,metrics=['accuracy'])
n_epoch = 10

early_stop = EarlyStopping(monitor='val_loss', patience=20, verbose=1, 
                           mode='auto', restore_best_weights=True)

reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5, 
                              verbose=1, mode='auto')

history = model.fit(x_train,y_train,epochs=19,callbacks=[reduce_lr,early_stop],validation_data=(x_val,y_val))

fig, ax = plt.subplots(2,1)
ax[0].plot(history.history['loss'], color='b', label="Training loss")
ax[0].plot(history.history['val_loss'], color='r', label="validation loss",axes =ax[0])
legend = ax[0].legend(loc='best', shadow=True)

ax[1].plot(history.history['accuracy'], color='b', label="Training accuracy")
ax[1].plot(history.history['val_accuracy'], color='r',label="Validation accuracy")
legend = ax[1].legend(loc='best', shadow=True)

model.save('/content/drive/My Drive/Skin Friends')

"""Training"""